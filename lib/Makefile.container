# This is considered a "typical" container Makefile and is designed to be 
# symlink'd from a container directory as "Makefile"

SHELL := /bin/bash
MAKEFLAGS := silent
DOCKER_HOST_IP_ADDR := $(shell echo `/sbin/ifconfig eth0 | grep -i mask | awk '{print $$2}'| cut -f2 -d:`)
CURRENT_USER := $(shell echo `whoami`)
CURRENT_USER_ID := $(shell echo `id -u`)
CURRENT_USER_GROUP_ID := $(shell echo `id -g`)
CURRENT_USER_HOME := $(HOME)
CURRENT_DIR_PATH := $(shell echo `pwd`)
CURRENT_DIR_NAME := $(shell basename `pwd`)

CONTAINER_NAME := $(CURRENT_DIR_NAME)
CONTAINER_DEFN_HOME := $(CURRENT_DIR_PATH)
CONTAINER_DOCKERFILE := Dockerfile

CONTAINER_IS_RUNNING := $(shell docker ps --filter "name=$(CONTAINER_NAME)" --filter "status=running" --quiet)

CAF_HOME = $(shell realpath ../)
CAF_LIB = $(CAF_HOME)/lib
CAF_SECRETS_HOME = $(CAF_HOME)/.secrets

# This is the Makefile environment's JSonnet template file which is generated
# each time the make command is run. It's basically a convenience wrapper that
# makes the runtime environment available to the CONTAINER_DEFN_JSONNET file.
CONTAINER_CONF_JSONNET_TMPL := $(CAF_HOME)/lib/container.conf.tmpl.jsonnet
CONTAINER_CONF_GENERATED_FILE := container.conf.json

# This is the primary JSonnet configuration file, it creates all the container's
# definition and configuration files using Jsonnet -m (multi-file) strategy.
CONTAINER_DEFN_JSONNET := container.defn.jsonnet

# This file holds the list of files generated by the jsonnet --multi command
CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST := .container.defn.jsonnet_generated

CUSTOM_POST_CONFIGURE_SCRIPT_NAME := ./after_configure.make-plugin.sh
CUSTOM_POST_START_SCRIPT_NAME := ./after_start.make-plugin.sh
CUSTOM_INCLUDE_FILE := ./container.make.inc

# All the different locations we'll look for *.jsonnet files (rightmost path wins precedence)
JSONNET_JPATH := --jpath $(CAF_HOME) --jpath $(CAF_LIB) --jpath $(CAF_SECRETS_HOME) --jpath $(CONTAINER_DEFN_HOME)

default: inspect

generate-container-conf:
	echo "Generated $(CONTAINER_CONF_GENERATED_FILE) from $(CONTAINER_CONF_JSONNET_TMPL)"
	jsonnet $(JSONNET_JPATH) \
			--ext-str GENERATED_ON="`date`" \
			--ext-str DOCKER_HOST_IP_ADDR=$(DOCKER_HOST_IP_ADDR) \
			--ext-str CAF_HOME=$(CAF_HOME) \
			--ext-str CAF_LIB=$(CAF_LIB) \
	        --ext-str containerName=$(CONTAINER_NAME) \
			--ext-str containerDefnHome=$(CONTAINER_DEFN_HOME) \
			--ext-str currentUserName=$(CURRENT_USER) \
			--ext-str currentUserId=$(CURRENT_USER_ID) \
			--ext-str currentUserGroupId=$(CURRENT_USER_GROUP_ID) \
			--ext-str currentUserHome=$(CURRENT_USER_HOME) \
			--output-file $(CONTAINER_CONF_GENERATED_FILE) \
			$(CONTAINER_CONF_JSONNET_TMPL)
	echo "Generated container definitions from $(CONTAINER_DEFN_JSONNET) (stored in $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST)):"
	jsonnet -S $(JSONNET_JPATH) --multi . $(CONTAINER_DEFN_JSONNET) > $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST)
	cat $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST)  | sed 's/^\.\//  > /'
	echo "Created .gitignore to prevent tracking of generated files"
	echo $(CONTAINER_CONF_GENERATED_FILE) > .gitignore
	echo $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST) >> .gitignore
	cat $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST) | sed 's/^\.\///' >> .gitignore

clean-generated-container-conf:
	echo "Deleted $(CONTAINER_CONF_GENERATED_FILE), generated from $(CONTAINER_CONF_JSONNET_TMPL)"
	rm -f $(CONTAINER_CONF_GENERATED_FILE)
	$(CAF_LIB)/delete-files-in-list.sh $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST)
	echo "Deleted $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST)"
	rm -f $(CONTAINER_DEFN_JSONNET_GENERATED_FILES_LIST)

configure: generate-container-conf
ifneq ("$(wildcard $(CUSTOM_POST_CONFIGURE_SCRIPT_NAME))","")
	echo "Found custom configuration script $(CUSTOM_POST_CONFIGURE_SCRIPT_NAME) for $(CONTAINER_NAME)"
	$(CUSTOM_POST_CONFIGURE_SCRIPT_NAME) $(CONTAINER_NAME)
endif

## Start the container and all dependencies
start: configure
	docker-compose up -d --force-recreate
ifneq ("$(wildcard $(CUSTOM_POST_START_SCRIPT_NAME))","")
	echo "Found custom start script $(CUSTOM_POST_START_SCRIPT_NAME) for $(CONTAINER_NAME)"
	$(CUSTOM_POST_START_SCRIPT_NAME) $(CONTAINER_NAME)
endif

shell:
	docker run -it --entrypoint="/bin/sh" $(CONTAINER_NAME) 

bash:
	docker run -it --entrypoint="/bin/bash" $(CONTAINER_NAME)

## If the container is running, inspect its settings
inspect:
ifdef CONTAINER_IS_RUNNING
	docker ps -a --filter "name=$(CONTAINER_NAME)" --format "table {{.ID}} {{.Names}}\t{{.Status}}\t{{.Ports}}\\t{{.Networks}}"
	docker images $(CONTAINER_NAME)
	printf "Volumes: "
	docker inspect -f '{{ json .Mounts }}' $(CONTAINER_NAME) | jq 
else
	echo "Container $(CONTAINER_NAME) is not running, here's docker ps -a:"
	echo ''
	docker ps -a --format "table {{.ID}} {{.Names}}\t{{.Status}}"
endif

## If the container is running, show its logs
logs:
ifdef CONTAINER_IS_RUNNING
	docker logs $(CONTAINER_NAME)
else
	echo "Container $(CONTAINER_NAME) is not running, here's docker ps -a:"
	echo ''
	docker ps -a --format "table {{.ID}} {{.Names}}\t{{.Status}}"
endif

## If the container is running, show its ports
ports:
ifdef CONTAINER_IS_RUNNING
	docker port $(CONTAINER_NAME)
else
	echo "Container $(CONTAINER_NAME) is not running, here's docker ps -a:"
	echo ''
	docker ps -a --format "table {{.ID}} {{.Names}}\t{{.Status}}"
endif

## Stop the container but retain volumes and generated files
stop: 
	docker-compose down

## Stop the container and delete associated volumes
kill: 
	docker-compose down --volumes

## Stop the container and clean up generated files
clean: kill clean-generated-container-conf

ifneq ("$(wildcard $(CONTAINER_DOCKERFILE))","")
## Build the container using Dockerfile in this directory
build: configure
	docker images $(CONTAINER_NAME)
	echo "Removing image $(CONTAINER_NAME)"
	docker rmi --force $(CONTAINER_NAME)
	docker build --force-rm --no-cache --tag $(CONTAINER_NAME) .
endif

TARGET_MAX_CHAR_NUM=10
# All targets should have a ## Help text above the target and they'll be automatically collected
# Show help, using auto generator from https://gist.github.com/prwhite/8168133
help: generate-container-conf
	@echo ''
	@echo 'Usage:'
	@echo '  ${YELLOW}make${RESET} ${GREEN}<target>${RESET}'
	@echo ''
	@echo 'Targets:'
	@awk '/^[a-zA-Z\-\_0-9]+:/ { \
		helpMessage = match(lastLine, /^## (.*)/); \
		if (helpMessage) { \
			helpCommand = substr($$1, 0, index($$1, ":")-1); \
			helpMessage = substr(lastLine, RSTART + 3, RLENGTH); \
			printf "  ${YELLOW}%-$(TARGET_MAX_CHAR_NUM)s${RESET} ${GREEN}%s${RESET}\n", helpCommand, helpMessage; \
		} \
	} \
	{ lastLine = $$0 }' $(MAKEFILE_LIST)
	@echo ''
	@echo '$(CONTAINER_CONF_GENERATED_FILE):'
	cat $(CONTAINER_CONF_GENERATED_FILE)

ifneq ("$(wildcard $(CUSTOM_INCLUDE_FILE))","")
include $(CUSTOM_INCLUDE_FILE)
endif

